#coding:utf-8
import argparse
import do_spaces_utils
import os
def main():
    parser = argparse.ArgumentParser(description='Digital Ocean Spaces Files')

    parser.add_argument('-l','--list',dest='list', action='store_true', default=False,
                        help="list all files"
                        )

    parser.add_argument('-u','--upload',
                        action='store',
                        nargs=1,
                        dest = 'uploadfile', # todo сделать так чтобы этот filename в helpе показывался правильно
                        type=lambda s: unicode(s, 'utf8'),
                        help = "Upload file"
                        )

    parser.add_argument("-d",'--download',
                        action='store_true',
                        # nargs="*",
                        dest= 'downloadfilename',
                        help='Download file '
                        )

    parser.add_argument('-k','--key',
                        action='store',
                        nargs=1,
                        dest='key',
                        required=False,
                        # default="-",
                        type=lambda s: unicode(s, 'utf8'),
                        help='Remote file key',)

    parser.add_argument('--delete',
                        action='store_true',
                        # nargs=,
                        dest='delete',
                        required=False,
                        # default="-",
                        # type=lambda s: unicode(s, 'utf8'),
                        help='Delete file  <key> on remote storage', )

    res = parser.parse_args()

    print "RES:{}".format(res)

    if res.list:
        """
        Просто печатает список файлов  
        """
        print "LIST Files"
        if not res.key:
            for  key in do_spaces_utils.MyBucket().listfiles():
                print key
            exit(0)
        else:
            print u"keys with prefix \"{}\"".format(res.key[0])
            for key in do_spaces_utils.MyBucket().list_key_prefix(res.key[0]):
                print key
            exit(0)
        exit(0)


    if res.uploadfile:
        """
        загружает файл  при необходимости используя заданный ключ 
        """
        bucket = do_spaces_utils.MyBucket()
        if res.key and (res.key != '-'):
            print u" NOT IMplemeted Yet! \nuploading file \'{}\' with key {} ".format(res.uploadfile[0],res.key)
            #todo реализовать это позднее - чтобы можно было указывать ключ при загрузке файла

        else:
            filename = res.uploadfile[0]
            if os.path.isfile(filename):
                print u"Uploading file \'{}\' with autogeneratedkey  ".format(filename)
                newkey = bucket.putfile(filename)
                print u"NEWKey=\"{}\"".format(newkey)
                exit(0)
            if os.path.isdir(filename):
                # print "DIR!"
                print u"Uploading _Directory_  \'{}\' with autogeneratedkey  ".format(filename)
                newkey = bucket.putdir(filename)
                for k in newkey:
                    print k
                exit(0)

            exit(0)

    if res.downloadfilename:
        if not res.key:
            print "please provide key"
            exit(0)
        key = res.key[0]
        print u"Downloading file with key \"{}\"  to the current directory".format(key)
        bucket = do_spaces_utils.MyBucket()
        try:
            fname = bucket.downloadfile(key=key)
            print u"File \"{}\" downloaded".format(fname)
        except AssertionError as e:
            print "Key \"{}\" not found".format(key)
        finally:
            exit(0)

    if res.delete:
        if not res.key:
            print "please provide key"
            exit(0)
        key = res.key[0]
        print u"Deleting  file with key \"{}\"  from  the storage".format(key)
        bucket = do_spaces_utils.MyBucket()
        # try:
        bucket.deletefile(key)
        # except AssertionError as e:
        #     print "Key \"{}\" not found".format(key)
        # finally:
        #     exit(0)
        exit(0)

    # subparser = parser.add_subparsers(help="Command to do")
    # parser_lists=subparser.add_parser('list',help='List files')
    # parser_upload=subparser.add_parser('upload',help='Upload files')
    # parser_download=subparser.add_parser('download',help='Upload files')

    # parser_lists.add_argument('-l','--list',action='store_true',dest='listfiles',help="list all files")
    # parser_upload.add_argument('download',action='append',nargs='*',help="downloads <key> file into target <dir> ")
    # subparser.add_parser('CP')
    # subparser.add_parser('Download')

    # res = parser_lists.parse_args()
    # print res
    # if res.listfiles:
    #     res=do_spaces_utils.MyBucket().listfiles()
    #     for item in res:
    #         print u"{}".format(item)
    #     print "-"*10
    #     print u"Total {} items".format(len(res))
    #     exit(0)
    # if res.download:
    #     print res.download[1]
    #     print res.download[2]
    #

    # print "Hello"

if __name__=='__main__':
    main()