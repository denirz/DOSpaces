# coding:utf-8
"""
 Main commnad line module
"""

import argparse
import codecs
import os
import sys

import do_spaces_utils

sys.stdout = codecs.getwriter('utf8')(sys.stdout)


def main():
    """
    Main Function  to be run with command line
    :return:
    """
    parser = argparse.ArgumentParser(description='Digital Ocean Spaces Files')

    parser.add_argument('-l', '--list',
                        dest='list', action='store_true', default=False,
                        help="list all files"
                       )

    parser.add_argument('-u', '--upload',
                        action='store',
                        nargs=1,
                        dest="uploadfile",
                        # todo сделать так чтобы этот filename в helpе показывался правильно
                        type=lambda s: unicode(s, 'utf8'),
                        help="Upload file"
                       )

    parser.add_argument("-d", '--download',
                        action='store_true',
                        # nargs="*",
                        dest='downloadfilename',
                        help='Download file'
                       )

    parser.add_argument('-k', '--key',
                        action='store',
                        nargs=1,
                        dest='key',
                        required=False,
                        # default="-",
                        type=lambda s: unicode(s, 'utf8'),
                        help='Remote file key',)

    parser.add_argument('--depth',
                        action='store',
                        nargs=1,
                        dest='depth',
                        required=False,
                        # default="-",
                        type=int,
                        help='Directory Depth while listing', )

    parser.add_argument('--delete',
                        action='store_true',
                        # nargs=,
                        dest='delete',
                        required=False,
                        # default="-",
                        # type=lambda s: unicode(s, 'utf8'),
                        help='Delete file  <key> on remote storage', )

    parser.add_argument('--link',
                        action='store',
                        nargs='*',
                        dest='validitytime',
                        required=False,
                        type=int,
                        # default="-",
                        # type=lambda s: unicode(s, 'utf8'),
                        help='Create link for file  <key> on remote storage', )

    res = parser.parse_args()

    print "RES:{}".format(res)

    if res.list:
        """
        Просто печатает список файлов
        """
        print u"LIST Files"
        if not res.key:
            for key in do_spaces_utils.MyBucket().listfiles():
                print key
            exit(0)
        else:
            if res.depth:
                print u"Keys with prefix \"{}\" and depth {}".\
                    format(res.key[0], res.depth[0])
                for key in do_spaces_utils.MyBucket().list_key_prefix(res.key[0], depth=res.depth[0]):
                    # print u"{}".format(key)
                    print key
            else:
                print u"Keys with prefix \"{}\"".format(res.key[0])
                for key in do_spaces_utils.MyBucket().list_key_prefix(res.key[0]):
                    print key
            exit(0)
        exit(0)

    if res.validitytime != None:  #   то есть если флаг link вообще установлен
        validitytime = 3600 if not res.validitytime else res.validitytime[0]*3600

        if not res.key:
            print "please ptovide key!"
            exit(0)
        key = res.key[0]
        # print u"Generating Url file with key \"{}\"  to the current directory".format(key)
        bucket = do_spaces_utils.MyBucket()
        try:
            bucket.is_key_valid(key)
        except AssertionError:
            print u"Key {} not found".format(key)
            exit(0)
        url = bucket.generate_url(key, expires_in=validitytime)
        print u"Generating Url file with key \"{}\"  to the current directory".format(key)
        print url
        print u"link valid during {} hours".format(validitytime / 3600)

    if res.uploadfile:
        #загружает файл  при необходимости используя заданный ключ
        bucket = do_spaces_utils.MyBucket()
        if res.key and (res.key != '-'):
            print u" NOT IMplemeted Yet! \nuploading file \'{}\' with key {} ".\
                format(res.uploadfile[0], res.key)
            #todo реализовать это позднее - чтобы можно было указывать ключ при загрузке файла

        else:
            filename = res.uploadfile[0]
            if os.path.isfile(filename):
                print u"Uploading file \'{}\' with autogeneratedkey  ".format(filename)
                newkey = bucket.putfile(filename)
                print u"NEWKey=\"{}\"".format(newkey)
                exit(0)
            if os.path.isdir(filename):
                # print "DIR!"
                print u"Uploading _Directory_  \'{}\' with autogeneratedkey  ".format(filename)
                newkey = bucket.putdir(filename)
                for k in newkey:
                    print k
                exit(0)

            exit(0)

    if res.downloadfilename:
        if not res.key:
            print u"please provide key"
            exit(0)
        key = res.key[0]
        print u"Downloading file with key \"{}\"  to the current directory".format(key)
        bucket = do_spaces_utils.MyBucket()
        try:
            fname = bucket.downloadfile(key=key)
            print u"File \"{}\" downloaded".format(fname)
        except AssertionError:
            print u"Key \"{}\" not found, trying directory...".format(key)
            flist = bucket.downloadtoautopath(key)
            print u"Downloaded Files:"
            for i in flist:
                print i

        finally:
            exit(0)

    if res.delete:
        if not res.key:
            print "please provide key"
            exit(0)
        key = res.key[0]
        print u"Deleting  file with key \"{}\"  from  the storage".format(key)
        bucket = do_spaces_utils.MyBucket()
        bucket.deletefile(key)
        exit(0)


if __name__ == '__main__':
    main()
